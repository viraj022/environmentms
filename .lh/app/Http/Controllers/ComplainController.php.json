{
    "sourceFile": "app/Http/Controllers/ComplainController.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 11,
            "patches": [
                {
                    "date": 1648098176872,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1648098185860,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -187,8 +187,9 @@\n \n     public function assign_complain_to_user($complain_id, $assignee_id)\n     {\n         $assigner_id = Auth::user()->id;\n+        \n         try {\n             \\DB::beginTransaction();\n             $assign_complain = Complain::find($complain_id);\n \n"
                },
                {
                    "date": 1648111278932,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,9 +116,15 @@\n     }\n \n     public function show()\n     {\n-        $complains = Complain::with(['createdUser', 'assignedUser'])->get();\n+        $user = Auth::user()->id;\n+        $complains = Complain::with(['createdUser', 'assignedUser'])\n+            ->where('assigned_user', $user)\n+            ->orWhere('assigned_user', null)\n+            ->orderBy('id', 'desc')\n+            ->get();\n+\n         return $complains;\n     }\n \n     public function complainProfile($id)\n@@ -170,8 +176,9 @@\n     public function delete_complain($id)\n     {\n         try {\n             $delete_complain = Complain::find($id)->delete();\n+\n             if ($delete_complain == true) {\n                 return array('status' => 1, 'msg' => 'Complain successfully deleted!');\n             } else {\n                 return array('status' => 0, 'msg' => 'Complain deletion was unsuccessful!');\n@@ -187,9 +194,9 @@\n \n     public function assign_complain_to_user($complain_id, $assignee_id)\n     {\n         $assigner_id = Auth::user()->id;\n-        \n+\n         try {\n             \\DB::beginTransaction();\n             $assign_complain = Complain::find($complain_id);\n \n"
                },
                {
                    "date": 1648111359269,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,8 +116,9 @@\n     }\n \n     public function show()\n     {\n+        \n         $user = Auth::user()->id;\n         $complains = Complain::with(['createdUser', 'assignedUser'])\n             ->where('assigned_user', $user)\n             ->orWhere('assigned_user', null)\n"
                },
                {
                    "date": 1648111365572,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,9 +116,9 @@\n     }\n \n     public function show()\n     {\n-        \n+        dd( Auth::user());\n         $user = Auth::user()->id;\n         $complains = Complain::with(['createdUser', 'assignedUser'])\n             ->where('assigned_user', $user)\n             ->orWhere('assigned_user', null)\n"
                },
                {
                    "date": 1648113212320,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,9 +116,8 @@\n     }\n \n     public function show()\n     {\n-        dd( Auth::user());\n         $user = Auth::user()->id;\n         $complains = Complain::with(['createdUser', 'assignedUser'])\n             ->where('assigned_user', $user)\n             ->orWhere('assigned_user', null)\n"
                },
                {
                    "date": 1648113259816,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,351 @@\n+<?php\n+\n+namespace App\\Http\\Controllers;\n+\n+use Illuminate\\Http\\Request;\n+use App\\Rules\\contactNo;\n+use Illuminate\\Support\\Facades\\Auth;\n+use App\\Complain;\n+use App\\ComplainComment;\n+use App\\ComplainMinute;\n+use App\\ComplainAssignLog;\n+use App\\Client;\n+use Exception;\n+use Illuminate\\Support\\Facades\\Log;\n+\n+class ComplainController extends Controller\n+{\n+\n+    public function index()\n+    {\n+        return view('complains');\n+    }\n+\n+    public function save_complain(Request $request)\n+    {\n+        $user = Auth::user()->id;\n+        request()->validate([\n+            \"complainer_name_ipt\" => 'required|max:255|string',\n+            \"complainer_address_ipt\" => 'required|max:255|string',\n+            \"contact_complainer_ipt\" => ['required', 'numeric', 'nullable', 'min:10'],\n+            \"recieve_type_ipt\" => 'required',\n+            \"complain_desc_ipt\" => 'required|max:255|string',\n+            \"complainer_code\" => 'required|max:255|string',\n+            // \"file_list\" => 'required',\n+            \"pradeshiya_saba_id\" => 'required'\n+        ]);\n+\n+        $save_complain = Complain::create([\n+            \"complainer_name\" => $request->complainer_name_ipt,\n+            \"complainer_address\" => $request->complainer_address_ipt,\n+            \"comp_contact_no\" => $request->contact_complainer_ipt,\n+            \"recieve_type\" => $request->recieve_type_ipt,\n+            \"complain_des\" => $request->complain_desc_ipt,\n+            \"complainer_code\" => $request->complainer_code,\n+            \"created_user\" =>  $user,\n+            \"pradeshiya_saba_id\" => $request->pradeshiya_saba_id,\n+        ]);\n+        $files = $request->file_list;\n+        if ($files != null) {\n+            $Arr = array();\n+            foreach ($files as $file) {\n+                $attach = $file->store('public/complain_attachments/' . $save_complain->id);\n+                $Arr[] = [\n+                    'img_path' => str_replace('public/', '', $attach),\n+                    'upload_time' => date(\"Y-m-d H:i:s\"),\n+                    'uploaded_user' => $user\n+                ];\n+            }\n+\n+            $save_complain->attachment = json_encode($Arr);\n+        }\n+        $save_complain->save();\n+\n+        if ($save_complain == true) {\n+            return array('status' => 1, 'msg' => 'Complain successfully saved');\n+        } else {\n+            return array('status' => 0, 'msg' => 'Complain save unsuccessful');\n+        }\n+    }\n+\n+    public function update_complain(Request $request, $id)\n+    {\n+        $user = Auth::user()->id;\n+        request()->validate([\n+            \"complainer_name_ipt\" => 'required|max:255|string',\n+            \"complainer_address_ipt\" => 'required|max:255|string',\n+            \"contact_complainer_ipt\" => ['required', 'numeric', 'nullable', 'min:10'],\n+            \"recieve_type_ipt\" => 'required',\n+            \"complain_desc_ipt\" => 'required|max:255|string',\n+            \"complainer_code\" => 'required|max:255|string',\n+            // \"file_list\" => 'required',\n+            \"pradeshiya_saba_id\" => 'required'\n+        ]);\n+\n+        $update_complain = Complain::find($id);\n+        $update_complain->complainer_name = $request->complainer_name_ipt;\n+        $update_complain->complainer_address = $request->complainer_address_ipt;\n+        $update_complain->comp_contact_no = $request->contact_complainer_ipt;\n+        $update_complain->recieve_type = $request->recieve_type_ipt;\n+        $update_complain->complain_des = $request->complain_desc_ipt;\n+        $update_complain->complainer_code = $request->complainer_code;\n+        $update_complain->created_user = $user;\n+        $update_complain->pradeshiya_saba_id = $request->pradeshiya_saba_id;\n+        $files = $request->file_list;\n+\n+        if ($files != null) {\n+            $Arr = array();\n+            foreach ($files as $file) {\n+                $attach = $file->store('public/complain_attachments/' . $id);\n+                $Arr[] = [\n+                    'img_path' => str_replace('public/', '', $attach),\n+                    'upload_time' => date(\"Y-m-d H:i:s\"),\n+                    'uploaded_user' => $user\n+                ];\n+            }\n+\n+            $update_complain->attachment = json_encode($Arr);\n+        }\n+        $update_complain->save();\n+\n+        if ($update_complain == true) {\n+            return array('status' => 1, 'msg' => 'Complain successfully updated');\n+        } else {\n+            return array('status' => 0, 'msg' => 'Complain update unsuccessful');\n+        }\n+    }\n+\n+    public function show()\n+    {\n+        $user = auth()->user()->id;\n+        $complains = Complain::with(['createdUser', 'assignedUser'])\n+            ->where('assigned_user', $user)\n+            ->orWhere('assigned_user', null)\n+            ->orderBy('id', 'desc')\n+            ->get();\n+\n+        return $complains;\n+    }\n+\n+    public function complainProfile($id)\n+    {\n+        $user = Auth::user();\n+        $pageAuth = $user->authentication(config('auth.privileges.complains'));\n+        return view('complain_profile', ['complain_id' => $id, 'pageAuth' => $pageAuth, 'user' => $user]);\n+    }\n+\n+    public function complainProfileData($id)\n+    {\n+        $complain_data = Complain::with([\n+            'assignedUser',\n+            'createdUser',\n+            'complainComments.commentedUser',\n+            'complainMinutes.minuteUser',\n+            'letters'\n+        ])->find($id);\n+        return $complain_data;\n+    }\n+\n+    public function update_attachments(Request $request, $id)\n+    {\n+        $user = Auth::user()->id;\n+        $update_attach = Complain::find($id);\n+        $curr_file_path_arr = json_decode($update_attach->attachment);\n+        $files = $request->file_list;\n+        if ($files != null) {\n+            foreach ($files as $file) {\n+                $attach = $file->store('public/complain_attachments/' . $id);\n+                $curr_file_path_arr[] = [\n+                    'img_path' => str_replace('public/', '', $attach),\n+                    'upload_time' => date(\"Y-m-d H:i:s\"),\n+                    'uploaded_user' => $user\n+                ];\n+            }\n+\n+            $update_attach->attachment = json_encode($curr_file_path_arr);\n+            $update_attach->save();\n+        }\n+\n+        if ($update_attach == true) {\n+            return array('status' => 1, 'msg' => 'Complain attachments successfully changed');\n+        } else {\n+            return array('status' => 0, 'msg' => 'Complain attachments change is unsuccessful');\n+        }\n+    }\n+\n+    public function delete_complain($id)\n+    {\n+        try {\n+            $delete_complain = Complain::find($id)->delete();\n+\n+            if ($delete_complain == true) {\n+                return array('status' => 1, 'msg' => 'Complain successfully deleted!');\n+            } else {\n+                return array('status' => 0, 'msg' => 'Complain deletion was unsuccessful!');\n+            }\n+        } catch (Exception $ex) {\n+            if ($ex->getCode() == '23000') {\n+                return array('status' => 0, 'msg' => 'This complain cannot be deleted, due to its dependencies');\n+            } else {\n+                return array('status' => 0, 'msg' => 'Database Error!');\n+            }\n+        }\n+    }\n+\n+    public function assign_complain_to_user($complain_id, $assignee_id)\n+    {\n+        $assigner_id = Auth::user()->id;\n+\n+        try {\n+            \\DB::beginTransaction();\n+            $assign_complain = Complain::find($complain_id);\n+\n+            $assign_complain->assigned_user = $assignee_id;\n+            $assign_complain->created_user = $assigner_id;\n+            $assign_complain->save();\n+\n+            ComplainAssignLog::create([\n+                \"complain_id\" => $complain_id,\n+                \"assigner_user\" => $assigner_id,\n+                \"assignee_user\" => $assignee_id,\n+                \"assigned_time\" => date(\"Y-m-d H:i:s\"),\n+            ]);\n+\n+\n+            \\DB::commit();\n+            return array('status' => 1, 'msg' => 'Complain assign successful');\n+        } catch (\\Exception $e) {\n+            \\DB::rollBack();\n+            return array('status' => 0, 'msg' => 'Complain assign unsuccessful');\n+        }\n+    }\n+\n+    public function add_comment_to_complain(Request $request)\n+    {\n+        $user_id = Auth::user()->id;\n+        $save_complain_comment = new ComplainComment();\n+        $save_complain_comment->comment = $request->comment;\n+        $save_complain_comment->complain_id = $request->comp_comnt_hid_id;\n+        $save_complain_comment->commented_user_id = $user_id;\n+        $save_complain_comment->save();\n+\n+        if ($save_complain_comment == true) {\n+            return array('status' => 1, 'msg' => 'Complain comment addition successful');\n+        } else {\n+            return array('status' => 0, 'msg' => 'Complain comment addition unsuccessful');\n+        }\n+    }\n+\n+    public function add_minute_to_complain(Request $request)\n+    {\n+        $user_id = Auth::user()->id;\n+        $save_complain_minute = new ComplainMinute();\n+        $save_complain_minute->minute = $request->minute;\n+        $save_complain_minute->complain_id = $request->comp_minute_hid_id;\n+        $save_complain_minute->minute_user_id = $user_id;\n+        $save_complain_minute->save();\n+\n+        if ($save_complain_minute == true) {\n+            return array('status' => 1, 'msg' => 'Complain comment addition successful');\n+        } else {\n+            return array('status' => 0, 'msg' => 'Complain comment addition unsuccessful');\n+        }\n+    }\n+\n+    public function confirm_complain($complain_id)\n+    {\n+        $confirm_complain = Complain::find($complain_id);\n+        $confirm_complain->status = 1;\n+        $confirm_complain->save();\n+\n+        if ($confirm_complain == true) {\n+            return array('status' => 1, 'msg' => 'Complain confirmation is successful');\n+        } else {\n+            return array('status' => 0, 'msg' => 'Complain confirmation was unsuccessful');\n+        }\n+    }\n+\n+    public function reject_complain($complain_id)\n+    {\n+        $confirm_complain = Complain::find($complain_id);\n+        $confirm_complain->status = -1;\n+        $confirm_complain->save();\n+\n+        if ($confirm_complain == true) {\n+            return array('status' => 1, 'msg' => 'Complain rejection is successful');\n+        } else {\n+            return array('status' => 0, 'msg' => 'Complain rejection was unsuccessful');\n+        }\n+    }\n+\n+    public function forward_to_letter_preforation($complain_id)\n+    {\n+        $confirm_complain = Complain::find($complain_id);\n+        $confirm_complain->status = 4;\n+        $confirm_complain->save();\n+\n+        if ($confirm_complain == true) {\n+            return array('status' => 1, 'msg' => 'Forward letter preforation is successful');\n+        } else {\n+            return array('status' => 0, 'msg' => 'Forward letter preforation was unsuccessful');\n+        }\n+    }\n+\n+    public function get_complain_assign_log(Request $request, $complain_id)\n+    {\n+        $complain_assign_log = ComplainAssignLog::where('complain_id', $complain_id)\n+            ->with(['assignerUser', 'assigneeUser', 'complain'])\n+            ->whereHas('assigneeUser', function ($query) {\n+                $query->whereHas('roll', function ($query) {\n+                    $query->groupBy('level_id')\n+                        ->orderBy('assignee_user', 'desc');\n+                });\n+            })\n+            ->get();\n+\n+        return $complain_assign_log;\n+    }\n+\n+    public function forwarded_complains()\n+    {\n+        $forwarded_complains = Complain::where('status', 4)->get();\n+        return $forwarded_complains;\n+    }\n+\n+    public function removeAttach(Request $request)\n+    {\n+        $attach = Complain::find($request->id);\n+        $decoded_paths = json_decode($attach->attachment);\n+        foreach ($decoded_paths as $decoded_path) {\n+            if ($decoded_path->img_path == $request->file_path) {\n+                $decoded_path->img_path = '';\n+            }\n+        }\n+        $encoded_path = json_encode($decoded_paths);\n+        $attach->attachment = $encoded_path;\n+        $attach->save();\n+        if ($attach == true) {\n+            return array('status' => 1, 'msg' => 'Complain attachments successfully removed');\n+        } else {\n+            return array('status' => 0, 'msg' => 'Complain attachments removal was unsuccessful');\n+        }\n+    }\n+\n+    public function loadFileNo()\n+    {\n+        $file_no = Client::select('id', 'file_no')->get();\n+        return $file_no;\n+    }\n+\n+    public function assignFileNo(Request $request)\n+    {\n+        $assign_file = Complain::find($request->id);\n+        $assign_file->client_id = $request->client_id;\n+        $assign_file->save();\n+        if ($assign_file == true) {\n+            return array('status' => 1, 'msg' => 'File assigned successfully');\n+        } else {\n+            return array('status' => 0, 'msg' => 'File assigning was unsuccessful');\n+        }\n+    }\n+}\n"
                },
                {
                    "date": 1648113259850,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -348,355 +348,4 @@\n             return array('status' => 0, 'msg' => 'File assigning was unsuccessful');\n         }\n     }\n }\n-<?php\n-\n-namespace App\\Http\\Controllers;\n-\n-use Illuminate\\Http\\Request;\n-use App\\Rules\\contactNo;\n-use Illuminate\\Support\\Facades\\Auth;\n-use App\\Complain;\n-use App\\ComplainComment;\n-use App\\ComplainMinute;\n-use App\\ComplainAssignLog;\n-use App\\Client;\n-use Exception;\n-use Illuminate\\Support\\Facades\\Log;\n-\n-class ComplainController extends Controller\n-{\n-\n-    public function index()\n-    {\n-        return view('complains');\n-    }\n-\n-    public function save_complain(Request $request)\n-    {\n-        $user = Auth::user()->id;\n-        request()->validate([\n-            \"complainer_name_ipt\" => 'required|max:255|string',\n-            \"complainer_address_ipt\" => 'required|max:255|string',\n-            \"contact_complainer_ipt\" => ['required', 'numeric', 'nullable', 'min:10'],\n-            \"recieve_type_ipt\" => 'required',\n-            \"complain_desc_ipt\" => 'required|max:255|string',\n-            \"complainer_code\" => 'required|max:255|string',\n-            // \"file_list\" => 'required',\n-            \"pradeshiya_saba_id\" => 'required'\n-        ]);\n-\n-        $save_complain = Complain::create([\n-            \"complainer_name\" => $request->complainer_name_ipt,\n-            \"complainer_address\" => $request->complainer_address_ipt,\n-            \"comp_contact_no\" => $request->contact_complainer_ipt,\n-            \"recieve_type\" => $request->recieve_type_ipt,\n-            \"complain_des\" => $request->complain_desc_ipt,\n-            \"complainer_code\" => $request->complainer_code,\n-            \"created_user\" =>  $user,\n-            \"pradeshiya_saba_id\" => $request->pradeshiya_saba_id,\n-        ]);\n-        $files = $request->file_list;\n-        if ($files != null) {\n-            $Arr = array();\n-            foreach ($files as $file) {\n-                $attach = $file->store('public/complain_attachments/' . $save_complain->id);\n-                $Arr[] = [\n-                    'img_path' => str_replace('public/', '', $attach),\n-                    'upload_time' => date(\"Y-m-d H:i:s\"),\n-                    'uploaded_user' => $user\n-                ];\n-            }\n-\n-            $save_complain->attachment = json_encode($Arr);\n-        }\n-        $save_complain->save();\n-\n-        if ($save_complain == true) {\n-            return array('status' => 1, 'msg' => 'Complain successfully saved');\n-        } else {\n-            return array('status' => 0, 'msg' => 'Complain save unsuccessful');\n-        }\n-    }\n-\n-    public function update_complain(Request $request, $id)\n-    {\n-        $user = Auth::user()->id;\n-        request()->validate([\n-            \"complainer_name_ipt\" => 'required|max:255|string',\n-            \"complainer_address_ipt\" => 'required|max:255|string',\n-            \"contact_complainer_ipt\" => ['required', 'numeric', 'nullable', 'min:10'],\n-            \"recieve_type_ipt\" => 'required',\n-            \"complain_desc_ipt\" => 'required|max:255|string',\n-            \"complainer_code\" => 'required|max:255|string',\n-            // \"file_list\" => 'required',\n-            \"pradeshiya_saba_id\" => 'required'\n-        ]);\n-\n-        $update_complain = Complain::find($id);\n-        $update_complain->complainer_name = $request->complainer_name_ipt;\n-        $update_complain->complainer_address = $request->complainer_address_ipt;\n-        $update_complain->comp_contact_no = $request->contact_complainer_ipt;\n-        $update_complain->recieve_type = $request->recieve_type_ipt;\n-        $update_complain->complain_des = $request->complain_desc_ipt;\n-        $update_complain->complainer_code = $request->complainer_code;\n-        $update_complain->created_user = $user;\n-        $update_complain->pradeshiya_saba_id = $request->pradeshiya_saba_id;\n-        $files = $request->file_list;\n-\n-        if ($files != null) {\n-            $Arr = array();\n-            foreach ($files as $file) {\n-                $attach = $file->store('public/complain_attachments/' . $id);\n-                $Arr[] = [\n-                    'img_path' => str_replace('public/', '', $attach),\n-                    'upload_time' => date(\"Y-m-d H:i:s\"),\n-                    'uploaded_user' => $user\n-                ];\n-            }\n-\n-            $update_complain->attachment = json_encode($Arr);\n-        }\n-        $update_complain->save();\n-\n-        if ($update_complain == true) {\n-            return array('status' => 1, 'msg' => 'Complain successfully updated');\n-        } else {\n-            return array('status' => 0, 'msg' => 'Complain update unsuccessful');\n-        }\n-    }\n-\n-    public function show()\n-    {\n-        $user = Auth::user()->id;\n-        $complains = Complain::with(['createdUser', 'assignedUser'])\n-            ->where('assigned_user', $user)\n-            ->orWhere('assigned_user', null)\n-            ->orderBy('id', 'desc')\n-            ->get();\n-\n-        return $complains;\n-    }\n-\n-    public function complainProfile($id)\n-    {\n-        $user = Auth::user();\n-        $pageAuth = $user->authentication(config('auth.privileges.complains'));\n-        return view('complain_profile', ['complain_id' => $id, 'pageAuth' => $pageAuth, 'user' => $user]);\n-    }\n-\n-    public function complainProfileData($id)\n-    {\n-        $complain_data = Complain::with([\n-            'assignedUser',\n-            'createdUser',\n-            'complainComments.commentedUser',\n-            'complainMinutes.minuteUser',\n-            'letters'\n-        ])->find($id);\n-        return $complain_data;\n-    }\n-\n-    public function update_attachments(Request $request, $id)\n-    {\n-        $user = Auth::user()->id;\n-        $update_attach = Complain::find($id);\n-        $curr_file_path_arr = json_decode($update_attach->attachment);\n-        $files = $request->file_list;\n-        if ($files != null) {\n-            foreach ($files as $file) {\n-                $attach = $file->store('public/complain_attachments/' . $id);\n-                $curr_file_path_arr[] = [\n-                    'img_path' => str_replace('public/', '', $attach),\n-                    'upload_time' => date(\"Y-m-d H:i:s\"),\n-                    'uploaded_user' => $user\n-                ];\n-            }\n-\n-            $update_attach->attachment = json_encode($curr_file_path_arr);\n-            $update_attach->save();\n-        }\n-\n-        if ($update_attach == true) {\n-            return array('status' => 1, 'msg' => 'Complain attachments successfully changed');\n-        } else {\n-            return array('status' => 0, 'msg' => 'Complain attachments change is unsuccessful');\n-        }\n-    }\n-\n-    public function delete_complain($id)\n-    {\n-        try {\n-            $delete_complain = Complain::find($id)->delete();\n-\n-            if ($delete_complain == true) {\n-                return array('status' => 1, 'msg' => 'Complain successfully deleted!');\n-            } else {\n-                return array('status' => 0, 'msg' => 'Complain deletion was unsuccessful!');\n-            }\n-        } catch (Exception $ex) {\n-            if ($ex->getCode() == '23000') {\n-                return array('status' => 0, 'msg' => 'This complain cannot be deleted, due to its dependencies');\n-            } else {\n-                return array('status' => 0, 'msg' => 'Database Error!');\n-            }\n-        }\n-    }\n-\n-    public function assign_complain_to_user($complain_id, $assignee_id)\n-    {\n-        $assigner_id = Auth::user()->id;\n-\n-        try {\n-            \\DB::beginTransaction();\n-            $assign_complain = Complain::find($complain_id);\n-\n-            $assign_complain->assigned_user = $assignee_id;\n-            $assign_complain->created_user = $assigner_id;\n-            $assign_complain->save();\n-\n-            ComplainAssignLog::create([\n-                \"complain_id\" => $complain_id,\n-                \"assigner_user\" => $assigner_id,\n-                \"assignee_user\" => $assignee_id,\n-                \"assigned_time\" => date(\"Y-m-d H:i:s\"),\n-            ]);\n-\n-\n-            \\DB::commit();\n-            return array('status' => 1, 'msg' => 'Complain assign successful');\n-        } catch (\\Exception $e) {\n-            \\DB::rollBack();\n-            return array('status' => 0, 'msg' => 'Complain assign unsuccessful');\n-        }\n-    }\n-\n-    public function add_comment_to_complain(Request $request)\n-    {\n-        $user_id = Auth::user()->id;\n-        $save_complain_comment = new ComplainComment();\n-        $save_complain_comment->comment = $request->comment;\n-        $save_complain_comment->complain_id = $request->comp_comnt_hid_id;\n-        $save_complain_comment->commented_user_id = $user_id;\n-        $save_complain_comment->save();\n-\n-        if ($save_complain_comment == true) {\n-            return array('status' => 1, 'msg' => 'Complain comment addition successful');\n-        } else {\n-            return array('status' => 0, 'msg' => 'Complain comment addition unsuccessful');\n-        }\n-    }\n-\n-    public function add_minute_to_complain(Request $request)\n-    {\n-        $user_id = Auth::user()->id;\n-        $save_complain_minute = new ComplainMinute();\n-        $save_complain_minute->minute = $request->minute;\n-        $save_complain_minute->complain_id = $request->comp_minute_hid_id;\n-        $save_complain_minute->minute_user_id = $user_id;\n-        $save_complain_minute->save();\n-\n-        if ($save_complain_minute == true) {\n-            return array('status' => 1, 'msg' => 'Complain comment addition successful');\n-        } else {\n-            return array('status' => 0, 'msg' => 'Complain comment addition unsuccessful');\n-        }\n-    }\n-\n-    public function confirm_complain($complain_id)\n-    {\n-        $confirm_complain = Complain::find($complain_id);\n-        $confirm_complain->status = 1;\n-        $confirm_complain->save();\n-\n-        if ($confirm_complain == true) {\n-            return array('status' => 1, 'msg' => 'Complain confirmation is successful');\n-        } else {\n-            return array('status' => 0, 'msg' => 'Complain confirmation was unsuccessful');\n-        }\n-    }\n-\n-    public function reject_complain($complain_id)\n-    {\n-        $confirm_complain = Complain::find($complain_id);\n-        $confirm_complain->status = -1;\n-        $confirm_complain->save();\n-\n-        if ($confirm_complain == true) {\n-            return array('status' => 1, 'msg' => 'Complain rejection is successful');\n-        } else {\n-            return array('status' => 0, 'msg' => 'Complain rejection was unsuccessful');\n-        }\n-    }\n-\n-    public function forward_to_letter_preforation($complain_id)\n-    {\n-        $confirm_complain = Complain::find($complain_id);\n-        $confirm_complain->status = 4;\n-        $confirm_complain->save();\n-\n-        if ($confirm_complain == true) {\n-            return array('status' => 1, 'msg' => 'Forward letter preforation is successful');\n-        } else {\n-            return array('status' => 0, 'msg' => 'Forward letter preforation was unsuccessful');\n-        }\n-    }\n-\n-    public function get_complain_assign_log(Request $request, $complain_id)\n-    {\n-        $complain_assign_log = ComplainAssignLog::where('complain_id', $complain_id)\n-            ->with(['assignerUser', 'assigneeUser', 'complain'])\n-            ->whereHas('assigneeUser', function ($query) {\n-                $query->whereHas('roll', function ($query) {\n-                    $query->groupBy('level_id')\n-                        ->orderBy('assignee_user', 'desc');\n-                });\n-            })\n-            ->get();\n-\n-        return $complain_assign_log;\n-    }\n-\n-    public function forwarded_complains()\n-    {\n-        $forwarded_complains = Complain::where('status', 4)->get();\n-        return $forwarded_complains;\n-    }\n-\n-    public function removeAttach(Request $request)\n-    {\n-        $attach = Complain::find($request->id);\n-        $decoded_paths = json_decode($attach->attachment);\n-        foreach ($decoded_paths as $decoded_path) {\n-            if ($decoded_path->img_path == $request->file_path) {\n-                $decoded_path->img_path = '';\n-            }\n-        }\n-        $encoded_path = json_encode($decoded_paths);\n-        $attach->attachment = $encoded_path;\n-        $attach->save();\n-        if ($attach == true) {\n-            return array('status' => 1, 'msg' => 'Complain attachments successfully removed');\n-        } else {\n-            return array('status' => 0, 'msg' => 'Complain attachments removal was unsuccessful');\n-        }\n-    }\n-\n-    public function loadFileNo()\n-    {\n-        $file_no = Client::select('id', 'file_no')->get();\n-        return $file_no;\n-    }\n-\n-    public function assignFileNo(Request $request)\n-    {\n-        $assign_file = Complain::find($request->id);\n-        $assign_file->client_id = $request->client_id;\n-        $assign_file->save();\n-        if ($assign_file == true) {\n-            return array('status' => 1, 'msg' => 'File assigned successfully');\n-        } else {\n-            return array('status' => 0, 'msg' => 'File assigning was unsuccessful');\n-        }\n-    }\n-}\n"
                },
                {
                    "date": 1648113267479,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,8 +15,12 @@\n \n class ComplainController extends Controller\n {\n \n+    public function __construct(Type $var = null) {\n+        $this->var = $var;\n+    }\n+\n     public function index()\n     {\n         return view('complains');\n     }\n"
                },
                {
                    "date": 1648113274099,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,10 +15,10 @@\n \n class ComplainController extends Controller\n {\n \n-    public function __construct(Type $var = null) {\n-        $this->var = $var;\n+    public function __construct() {\n+        $this->middleware('auth')\n     }\n \n     public function index()\n     {\n"
                },
                {
                    "date": 1648113341442,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n class ComplainController extends Controller\n {\n \n     public function __construct() {\n-        $this->middleware('auth')\n+        $this->middleware('auth');\n     }\n \n     public function index()\n     {\n@@ -120,9 +120,9 @@\n     }\n \n     public function show()\n     {\n-        $user = auth()->user()->id;\n+        $user = Auth::->user()->id;\n         $complains = Complain::with(['createdUser', 'assignedUser'])\n             ->where('assigned_user', $user)\n             ->orWhere('assigned_user', null)\n             ->orderBy('id', 'desc')\n"
                },
                {
                    "date": 1648113381180,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n class ComplainController extends Controller\n {\n \n     public function __construct() {\n-        $this->middleware('auth:aou');\n+        $this->middleware('auth:ao');\n     }\n \n     public function index()\n     {\n"
                }
            ],
            "date": 1648098176872,
            "name": "Commit-0",
            "content": "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\nuse App\\Rules\\contactNo;\nuse Illuminate\\Support\\Facades\\Auth;\nuse App\\Complain;\nuse App\\ComplainComment;\nuse App\\ComplainMinute;\nuse App\\ComplainAssignLog;\nuse App\\Client;\nuse Exception;\nuse Illuminate\\Support\\Facades\\Log;\n\nclass ComplainController extends Controller\n{\n\n    public function index()\n    {\n        return view('complains');\n    }\n\n    public function save_complain(Request $request)\n    {\n        $user = Auth::user()->id;\n        request()->validate([\n            \"complainer_name_ipt\" => 'required|max:255|string',\n            \"complainer_address_ipt\" => 'required|max:255|string',\n            \"contact_complainer_ipt\" => ['required', 'numeric', 'nullable', 'min:10'],\n            \"recieve_type_ipt\" => 'required',\n            \"complain_desc_ipt\" => 'required|max:255|string',\n            \"complainer_code\" => 'required|max:255|string',\n            // \"file_list\" => 'required',\n            \"pradeshiya_saba_id\" => 'required'\n        ]);\n\n        $save_complain = Complain::create([\n            \"complainer_name\" => $request->complainer_name_ipt,\n            \"complainer_address\" => $request->complainer_address_ipt,\n            \"comp_contact_no\" => $request->contact_complainer_ipt,\n            \"recieve_type\" => $request->recieve_type_ipt,\n            \"complain_des\" => $request->complain_desc_ipt,\n            \"complainer_code\" => $request->complainer_code,\n            \"created_user\" =>  $user,\n            \"pradeshiya_saba_id\" => $request->pradeshiya_saba_id,\n        ]);\n        $files = $request->file_list;\n        if ($files != null) {\n            $Arr = array();\n            foreach ($files as $file) {\n                $attach = $file->store('public/complain_attachments/' . $save_complain->id);\n                $Arr[] = [\n                    'img_path' => str_replace('public/', '', $attach),\n                    'upload_time' => date(\"Y-m-d H:i:s\"),\n                    'uploaded_user' => $user\n                ];\n            }\n\n            $save_complain->attachment = json_encode($Arr);\n        }\n        $save_complain->save();\n\n        if ($save_complain == true) {\n            return array('status' => 1, 'msg' => 'Complain successfully saved');\n        } else {\n            return array('status' => 0, 'msg' => 'Complain save unsuccessful');\n        }\n    }\n\n    public function update_complain(Request $request, $id)\n    {\n        $user = Auth::user()->id;\n        request()->validate([\n            \"complainer_name_ipt\" => 'required|max:255|string',\n            \"complainer_address_ipt\" => 'required|max:255|string',\n            \"contact_complainer_ipt\" => ['required', 'numeric', 'nullable', 'min:10'],\n            \"recieve_type_ipt\" => 'required',\n            \"complain_desc_ipt\" => 'required|max:255|string',\n            \"complainer_code\" => 'required|max:255|string',\n            // \"file_list\" => 'required',\n            \"pradeshiya_saba_id\" => 'required'\n        ]);\n\n        $update_complain = Complain::find($id);\n        $update_complain->complainer_name = $request->complainer_name_ipt;\n        $update_complain->complainer_address = $request->complainer_address_ipt;\n        $update_complain->comp_contact_no = $request->contact_complainer_ipt;\n        $update_complain->recieve_type = $request->recieve_type_ipt;\n        $update_complain->complain_des = $request->complain_desc_ipt;\n        $update_complain->complainer_code = $request->complainer_code;\n        $update_complain->created_user = $user;\n        $update_complain->pradeshiya_saba_id = $request->pradeshiya_saba_id;\n        $files = $request->file_list;\n\n        if ($files != null) {\n            $Arr = array();\n            foreach ($files as $file) {\n                $attach = $file->store('public/complain_attachments/' . $id);\n                $Arr[] = [\n                    'img_path' => str_replace('public/', '', $attach),\n                    'upload_time' => date(\"Y-m-d H:i:s\"),\n                    'uploaded_user' => $user\n                ];\n            }\n\n            $update_complain->attachment = json_encode($Arr);\n        }\n        $update_complain->save();\n\n        if ($update_complain == true) {\n            return array('status' => 1, 'msg' => 'Complain successfully updated');\n        } else {\n            return array('status' => 0, 'msg' => 'Complain update unsuccessful');\n        }\n    }\n\n    public function show()\n    {\n        $complains = Complain::with(['createdUser', 'assignedUser'])->get();\n        return $complains;\n    }\n\n    public function complainProfile($id)\n    {\n        $user = Auth::user();\n        $pageAuth = $user->authentication(config('auth.privileges.complains'));\n        return view('complain_profile', ['complain_id' => $id, 'pageAuth' => $pageAuth, 'user' => $user]);\n    }\n\n    public function complainProfileData($id)\n    {\n        $complain_data = Complain::with([\n            'assignedUser',\n            'createdUser',\n            'complainComments.commentedUser',\n            'complainMinutes.minuteUser',\n            'letters'\n        ])->find($id);\n        return $complain_data;\n    }\n\n    public function update_attachments(Request $request, $id)\n    {\n        $user = Auth::user()->id;\n        $update_attach = Complain::find($id);\n        $curr_file_path_arr = json_decode($update_attach->attachment);\n        $files = $request->file_list;\n        if ($files != null) {\n            foreach ($files as $file) {\n                $attach = $file->store('public/complain_attachments/' . $id);\n                $curr_file_path_arr[] = [\n                    'img_path' => str_replace('public/', '', $attach),\n                    'upload_time' => date(\"Y-m-d H:i:s\"),\n                    'uploaded_user' => $user\n                ];\n            }\n\n            $update_attach->attachment = json_encode($curr_file_path_arr);\n            $update_attach->save();\n        }\n\n        if ($update_attach == true) {\n            return array('status' => 1, 'msg' => 'Complain attachments successfully changed');\n        } else {\n            return array('status' => 0, 'msg' => 'Complain attachments change is unsuccessful');\n        }\n    }\n\n    public function delete_complain($id)\n    {\n        try {\n            $delete_complain = Complain::find($id)->delete();\n            if ($delete_complain == true) {\n                return array('status' => 1, 'msg' => 'Complain successfully deleted!');\n            } else {\n                return array('status' => 0, 'msg' => 'Complain deletion was unsuccessful!');\n            }\n        } catch (Exception $ex) {\n            if ($ex->getCode() == '23000') {\n                return array('status' => 0, 'msg' => 'This complain cannot be deleted, due to its dependencies');\n            } else {\n                return array('status' => 0, 'msg' => 'Database Error!');\n            }\n        }\n    }\n\n    public function assign_complain_to_user($complain_id, $assignee_id)\n    {\n        $assigner_id = Auth::user()->id;\n        try {\n            \\DB::beginTransaction();\n            $assign_complain = Complain::find($complain_id);\n\n            $assign_complain->assigned_user = $assignee_id;\n            $assign_complain->created_user = $assigner_id;\n            $assign_complain->save();\n\n            ComplainAssignLog::create([\n                \"complain_id\" => $complain_id,\n                \"assigner_user\" => $assigner_id,\n                \"assignee_user\" => $assignee_id,\n                \"assigned_time\" => date(\"Y-m-d H:i:s\"),\n            ]);\n\n\n            \\DB::commit();\n            return array('status' => 1, 'msg' => 'Complain assign successful');\n        } catch (\\Exception $e) {\n            \\DB::rollBack();\n            return array('status' => 0, 'msg' => 'Complain assign unsuccessful');\n        }\n    }\n\n    public function add_comment_to_complain(Request $request)\n    {\n        $user_id = Auth::user()->id;\n        $save_complain_comment = new ComplainComment();\n        $save_complain_comment->comment = $request->comment;\n        $save_complain_comment->complain_id = $request->comp_comnt_hid_id;\n        $save_complain_comment->commented_user_id = $user_id;\n        $save_complain_comment->save();\n\n        if ($save_complain_comment == true) {\n            return array('status' => 1, 'msg' => 'Complain comment addition successful');\n        } else {\n            return array('status' => 0, 'msg' => 'Complain comment addition unsuccessful');\n        }\n    }\n\n    public function add_minute_to_complain(Request $request)\n    {\n        $user_id = Auth::user()->id;\n        $save_complain_minute = new ComplainMinute();\n        $save_complain_minute->minute = $request->minute;\n        $save_complain_minute->complain_id = $request->comp_minute_hid_id;\n        $save_complain_minute->minute_user_id = $user_id;\n        $save_complain_minute->save();\n\n        if ($save_complain_minute == true) {\n            return array('status' => 1, 'msg' => 'Complain comment addition successful');\n        } else {\n            return array('status' => 0, 'msg' => 'Complain comment addition unsuccessful');\n        }\n    }\n\n    public function confirm_complain($complain_id)\n    {\n        $confirm_complain = Complain::find($complain_id);\n        $confirm_complain->status = 1;\n        $confirm_complain->save();\n\n        if ($confirm_complain == true) {\n            return array('status' => 1, 'msg' => 'Complain confirmation is successful');\n        } else {\n            return array('status' => 0, 'msg' => 'Complain confirmation was unsuccessful');\n        }\n    }\n\n    public function reject_complain($complain_id)\n    {\n        $confirm_complain = Complain::find($complain_id);\n        $confirm_complain->status = -1;\n        $confirm_complain->save();\n\n        if ($confirm_complain == true) {\n            return array('status' => 1, 'msg' => 'Complain rejection is successful');\n        } else {\n            return array('status' => 0, 'msg' => 'Complain rejection was unsuccessful');\n        }\n    }\n\n    public function forward_to_letter_preforation($complain_id)\n    {\n        $confirm_complain = Complain::find($complain_id);\n        $confirm_complain->status = 4;\n        $confirm_complain->save();\n\n        if ($confirm_complain == true) {\n            return array('status' => 1, 'msg' => 'Forward letter preforation is successful');\n        } else {\n            return array('status' => 0, 'msg' => 'Forward letter preforation was unsuccessful');\n        }\n    }\n\n    public function get_complain_assign_log(Request $request, $complain_id)\n    {\n        $complain_assign_log = ComplainAssignLog::where('complain_id', $complain_id)\n            ->with(['assignerUser', 'assigneeUser', 'complain'])\n            ->whereHas('assigneeUser', function ($query) {\n                $query->whereHas('roll', function ($query) {\n                    $query->groupBy('level_id')\n                        ->orderBy('assignee_user', 'desc');\n                });\n            })\n            ->get();\n\n        return $complain_assign_log;\n    }\n\n    public function forwarded_complains()\n    {\n        $forwarded_complains = Complain::where('status', 4)->get();\n        return $forwarded_complains;\n    }\n\n    public function removeAttach(Request $request)\n    {\n        $attach = Complain::find($request->id);\n        $decoded_paths = json_decode($attach->attachment);\n        foreach ($decoded_paths as $decoded_path) {\n            if ($decoded_path->img_path == $request->file_path) {\n                $decoded_path->img_path = '';\n            }\n        }\n        $encoded_path = json_encode($decoded_paths);\n        $attach->attachment = $encoded_path;\n        $attach->save();\n        if ($attach == true) {\n            return array('status' => 1, 'msg' => 'Complain attachments successfully removed');\n        } else {\n            return array('status' => 0, 'msg' => 'Complain attachments removal was unsuccessful');\n        }\n    }\n\n    public function loadFileNo()\n    {\n        $file_no = Client::select('id', 'file_no')->get();\n        return $file_no;\n    }\n\n    public function assignFileNo(Request $request)\n    {\n        $assign_file = Complain::find($request->id);\n        $assign_file->client_id = $request->client_id;\n        $assign_file->save();\n        if ($assign_file == true) {\n            return array('status' => 1, 'msg' => 'File assigned successfully');\n        } else {\n            return array('status' => 0, 'msg' => 'File assigning was unsuccessful');\n        }\n    }\n}\n"
        }
    ]
}